# Generated by Django 5.1.3 on 2024-12-07 19:45

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Handbooks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_name', models.CharField(max_length=128)),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name': 'Справочник',
                'verbose_name_plural': 'Справочники',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=128)),
                ('group', models.CharField(choices=[('client', 'client'), ('service company', 'service company'), ('manager', 'manager')], default='client', max_length=128)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=128, verbose_name='Зав. № машины')),
                ('eng_number', models.CharField(max_length=128, verbose_name='Зав. № двигателя')),
                ('trans_number', models.CharField(max_length=128, verbose_name='Зав. № трансмиссии')),
                ('dev_axle_number', models.CharField(max_length=128, verbose_name='Зав. № ведущего моста')),
                ('str_axle_number', models.CharField(max_length=128, verbose_name='Зав. № управляемого моста')),
                ('sup_contract', models.CharField(max_length=128, verbose_name='Договор поставки №, дата')),
                ('ship_date', models.DateField(verbose_name='Дата отгрузки с завода')),
                ('consignee', models.CharField(max_length=128, verbose_name='Грузополучатель')),
                ('sup_address', models.CharField(max_length=128, verbose_name='Адрес поставки')),
                ('equipment', models.TextField(max_length=1024, verbose_name='Комплектация (доп. опции)')),
                ('client', models.ForeignKey(limit_choices_to={'group': 'client'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Клиент')),
                ('drv_axle_model', models.ForeignKey(limit_choices_to={'book_name': 'Модель ведущего моста'}, on_delete=django.db.models.deletion.CASCADE, related_name='drv_model', to='app.handbooks', verbose_name='Модель ведущего моста')),
                ('eng_model', models.ForeignKey(limit_choices_to={'book_name': 'Модель двигателя'}, on_delete=django.db.models.deletion.CASCADE, related_name='eng_model', to='app.handbooks', verbose_name='Модель двигателя')),
                ('service_company', models.ForeignKey(limit_choices_to={'group': 'service company'}, on_delete=django.db.models.deletion.CASCADE, related_name='service_company', to=settings.AUTH_USER_MODEL, verbose_name='Сервисная компания')),
                ('str_axle_model', models.ForeignKey(limit_choices_to={'book_name': 'Модель управляемого моста'}, on_delete=django.db.models.deletion.CASCADE, related_name='str_model', to='app.handbooks', verbose_name='Модель управляемого моста')),
                ('tech_model', models.ForeignKey(limit_choices_to={'book_name': 'Модель техники'}, on_delete=django.db.models.deletion.CASCADE, related_name='tech_model', to='app.handbooks', verbose_name='Модель техники')),
                ('trans_model', models.ForeignKey(limit_choices_to={'book_name': 'Модель трансмиссии'}, on_delete=django.db.models.deletion.CASCADE, related_name='trans_model', to='app.handbooks', verbose_name='Модель трансмиссии')),
            ],
            options={
                'verbose_name': 'Машина',
                'verbose_name_plural': 'Машины',
            },
        ),
        migrations.CreateModel(
            name='Reclamation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('failure_date', models.DateField(default=datetime.date.today, verbose_name='Дата отказа')),
                ('ng_hours', models.FloatField(default=0.0, verbose_name='Наработка, м/ч')),
                ('failure_desc', models.TextField(verbose_name='Описание отказа')),
                ('used_spares', models.TextField(verbose_name='Используемые запчасти')),
                ('recovery_date', models.DateField(default=datetime.date.today, verbose_name='Дата восстановления')),
                ('downtime', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(models.F('recovery_date'), '-', models.F('failure_date')), output_field=models.FloatField(default=0.0), verbose_name='Время простоя техники')),
                ('failure_point', models.ForeignKey(limit_choices_to={'book_name': 'Узел отказа'}, on_delete=django.db.models.deletion.CASCADE, related_name='fail_point', to='app.handbooks', verbose_name='Узел отказа')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.machine', verbose_name='Зав. № машины')),
                ('recovery_method', models.ForeignKey(limit_choices_to={'book_name': 'Восстановление'}, on_delete=django.db.models.deletion.CASCADE, related_name='rec_method', to='app.handbooks', verbose_name='Способ восстановления')),
                ('service_company', models.ForeignKey(limit_choices_to={'group': 'service company'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Сервисная компания')),
            ],
            options={
                'verbose_name': 'Рекламация',
                'verbose_name_plural': 'Рекламации',
            },
        ),
        migrations.CreateModel(
            name='TechService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата проведения ТО')),
                ('eng_hours', models.FloatField(default=0.0, verbose_name='Наработка, м/ч')),
                ('order_number', models.CharField(max_length=128, verbose_name='Номер заказ-наряда')),
                ('order_date', models.DateField(verbose_name='Дата заказ-наряда')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.machine', verbose_name='Зав. № машины')),
                ('service_company', models.ForeignKey(limit_choices_to={'group': 'service company'}, on_delete=django.db.models.deletion.CASCADE, related_name='ts_service_company', to=settings.AUTH_USER_MODEL, verbose_name='Сервисная компания')),
                ('ts_type', models.ForeignKey(limit_choices_to={'book_name': 'Техническое обслуживание'}, on_delete=django.db.models.deletion.CASCADE, related_name='ts_type', to='app.handbooks', verbose_name='Вид ТО')),
            ],
            options={
                'verbose_name': 'Техническое обслуживание',
                'verbose_name_plural': 'Техническое обслуживание',
            },
        ),
    ]
